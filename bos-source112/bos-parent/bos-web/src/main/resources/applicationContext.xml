<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:soap="http://cxf.apache.org/bindings/soap"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd
						http://cxf.apache.org/bindings/soap 
						http://cxf.apache.org/schemas/configuration/soap.xsd
						http://cxf.apache.org/jaxws 
						http://cxf.apache.org/schemas/jaxws.xsd">
	<!-- 加载属性文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	
	<!--配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
		<!-- 配置LocalSessionFactoryBean，spring提供的用于整合hibernate的工厂bean -->
		<!--id必须为No bean named 'sessionFactory' is defined,否者需要配置xml  -->
	<bean id="sessionFactory1" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 注入hibernate相关的属性配置 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
		<!-- 注入hibernate的映射文件 -->
		<property name="mappingLocations">
			<list>
				<value>classpath:com/syl/domain/*.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory1"/>
	</bean>
	
	<!-- 组件扫描 ,创建对象-->
	<context:component-scan base-package="com.syl" />
	
	<!-- 支持spring注解 @Controller-action @Service @Repository-dao  @Component-all   @AutoWired   -->
	<context:annotation-config />
	
	<!-- 开启注解 事务 @Transactional-->
	<tx:annotation-driven/>
	
	<!-- 注册crm客户端代理对象 -->
	<jaxws:client id="crmAddress" serviceClass="com.syl.crm.ICustomerService" address="http://localhost/crm_heima32/service/customer">
	</jaxws:client>
		
	<!-- 配置shiro框架过滤器工厂 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 注入安全管理器对象 -->
		<property name="securityManager" ref="securityManager"></property>
		<!-- 注入相关页面访问url -->
		<property name="loginUrl" value="/login.jsp"></property>
		<property name="successUrl" value="/index.jsp"></property>
		<property name="unauthorizedUrl" value="/unauthorized.jsp"></property>
		<!-- 注入URL拦截规则 -->
		<property name="filterChainDefinitions">
			<value>
				/css/** = anon
				/js/** = anon
				/images/** = anon
				/validatecode.jsp* = anon
				/login.jsp = anon
				/userAction_login.action = anon
				/page_base_staff.action = perms["staff-list"]
				/* = authc
			</value>
		</property>
	</bean>
	
	<!-- 注入安全管理器对象 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="bosRealm"></property>
		<!-- 注入缓存管理器 -->
		<property name="cacheManager" ref="ehCacheManager"></property>
	</bean>
	
	<!--缓存管理器  -->
	<bean id="ehCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<!-- 注入encache的配置文件 -->
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"></property>
	</bean>
	<!-- 注册realm -->
	<bean id="bosRealm" class="com.syl.bos.realm.BOSRealm">
	
	</bean>
	
	<!-- 开启shiro框架注解支持 -->
	<bean id="defaultAdvisorAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
		<!-- true使用cglib(继承子类方式)代理,false使用jdk代理(接口) -->
		<property name="proxyTargetClass" value="true"></property>
	</bean>
	
	<!-- 配置shiro框架提供的切面类,用户创建代理对象  -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	</bean>
	
		<!-- 注册自定义作业类 -->
	<bean id="myJob" class="com.syl.bos.jobs.MailJob">
		<property name="username" value="isunyulong@126.com"/>
		<property name="password" value="aini1314520"/>
		<property name="smtpServer" value="smtp.126.com"/>
	</bean>
	
	<!-- 配置JobDetail -->
	<bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!--注入目标对象  -->
		<property name="targetObject" ref="myJob"></property>
		<!-- 注入目标方法 -->
		<property name="targetMethod" value="execute"></property>
	</bean>
	
	<!-- 配置触发器 -->
	<bean id="myTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<!-- 注入任务详情 -->
		<property name="jobDetail" ref="jobDetail"></property>
		<!-- 注入cron表达式,通过表达式指定出发的时间点 -->
		<property name="cronExpression">
			<value>0/5 * * * * ?</value>
			<!-- 每5秒执行一次 -->
		</property>
	</bean>
	
	<!-- 配置调度工程 -->
	<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!-- 注入触发器 -->
		<property name="triggers">
			<list>
			<!-- 	<ref bean="myTrigger"/> -->
			</list>
		</property>
	</bean>
	
	
</beans>
