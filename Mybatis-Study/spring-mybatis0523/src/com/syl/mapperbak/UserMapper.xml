<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
mapper接口代理实现的规则
1.映射文件中的anamespace等于接口的全路径名称
2.映射文件中sql语句id要等于接口的方法名称
3.映射文件中传入的参数类型要等于接口方法的传入参数类型
4.映射文件中返回结果集要等于接口方法中的返回类型
 -->
<mapper namespace="com.syl.mapperbak.UserMapper">

<!-- 封装sql条件,封装会可以重用 -->
<sql id="user_where">
	<!-- where
		会自动向sql语句中添加where关键字
		会去掉第一个条件的and 关键字
		 -->
		<where>
			<if test="username!=null and username!=''">
			and username like '%${username}%'
			</if>
			<if test="sex !=null and sex!=''">
			 and sex = #{sex}
			</if>
		</where>
</sql>

	<!-- id 唯一标识 parameterType指定参数类型(pojo) resultType:返回结果集类型 #{}占位符,如果传入的是基本类型string 
		long double int boolean float等,中的变量名称可以随意 -->
	<select id="findUserById" parameterType="int"
		resultType="user">
		SELECT * FROM user where id=#{id}
	</select>

	<!-- 返回结构是集合,返回类型写泛型参数类型 ${}拼接符号,字符串原样拼接,传入的参数是基本类型,中的变量名称必须是value 拼接符号有注入的风险,谨慎使用 -->
	<select id="findUserByUserName" parameterType="string"
		resultType="com.syl.pojobak.User">
		SELECT * FROM user where username LIKE '%${value}%'
	</select>

	<!-- #{传入是pojo类型} 必须是属性.属性.属性 SELECT LAST_INSERT_ID() 返回数据库自增主键 keyProperty将返回的的主键放入传入的pojo中id的属性中保存() 
		order相对于insert语句的执行顺序,在insert前before在insert后after resultType id的类型是keyProperty的类型 -->
	<insert id="insertUser" parameterType="com.syl.pojobak.User">
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		INSERT INTO `user` (username,birthday,sex,address)
		VALUES(#{username},#{birthday},#{sex},#{address})
	</insert>
	
	<select id="findUserByVo" parameterType="com.syl.pojobak.QueryVo" resultType="com.syl.pojobak.User">
		SELECT * FROM `user` WHERE username LIKE '%${user.username}%' AND sex=#{user.sex}
	</select>
	
	<!-- 返回结构是一行一列的时候才会指定返回类型为基本类型 -->
	<select id="findUserCount" resultType="java.lang.Integer">
		SELECT COUNT(*) from `user`
	</select>
		<!-- SELECT * from `user` where 1=1  -->
	<select id="findUserByUserNameAndSex" parameterType="com.syl.pojobak.User" resultType="com.syl.pojobak.User">
		SELECT * from `user` 
		<!-- 调用sql条件 -->
		<include refid="user_where"></include>
		
	</select>
	
	<select id="findUserByIdds" parameterType="com.syl.pojobak.QueryVo" resultType="com.syl.pojobak.User">
		SELECT * FROM `user`
		<where>
			<if test="ids !=null">
				<!-- 
				foreach循环传入的集合参数
				collection传入集合的变量名称
				item每次循环将循环的数据放入这个变量中
				open/close:循环开始/结束拼接的字符串
				separator:循环中拼接的分隔符
				 -->
				<foreach collection="ids" item="id" open="id IN (" close=")" separator=",">
					#{id}
				</foreach>
			</if>
		</where>
	</select>
	
	<!-- 一对一自动映射 -->
	<select id="findOrdersAndUser1" resultType="com.syl.pojobak.CustomerOrders">
		SELECT o.*,u.id uid,username,birthday,sex,address
 		from orders o,`user` u
		 where o.user_id = u.id
	</select>
	
	<!-- 一对一手动映射 -->
	<!-- 
		id:resultMap唯一标识
		type查询出的数据放入指定的对象中
		
	 -->
	<resultMap type="com.syl.pojobak.Orders" id="orderAndUserResultMap">
		<id column="id" property="id"/>
		<result column="user_id" property="userId"/>	
		<result column="number" property="number"/>	
		<result column="createtime" property="createtime"/>	
		<result column="note" property="note"/>	
		
		<!-- 指定单个对象的对应关系 
		property指定将数据放入Orders中的user属性中
		-->
		<association property="user" javaType="com.syl.pojobak.User">
			<id column="uid" property="id"/>
			<result column="username" property="username"/>
			<result column="birthday" property="birthday"/>
			<result column="sex" property="sex"/>
			<result column="address" property="address"/>
		</association>
	</resultMap>
	<select id="findOrdersAndUser2" resultMap="orderAndUserResultMap">
	SELECT o.*,u.id uid,username,birthday,sex,address
 		from orders o,`user` u
		 where o.user_id = u.id
	</select>

	
	<resultMap type="com.syl.pojobak.User" id="userAndOrders">
		<id column="id" property="id"/>
		<result column="username" property="username"/>
		<result column="birthday" property="birthday"/>
		<result column="sex" property="sex"/>
		<result column="address" property="address"/>
		
		<!-- 指定对应的集合关系映射 
			property:将数据放入User对象中的集合(ordersList)
			ofType集合属性的泛型类型
		-->
		<collection property="ordersList" ofType="com.syl.pojobak.Orders">
			<id column="oid" property="id"/>
			<result column="user_id" property="userId"/>
			<result column="number" property="number"/>
			<result column="createtime" property="createtime"/>
		</collection>
	</resultMap>
	<select id="findUserAndOrders" resultMap="userAndOrders">
		select u.*,o.id uid ,number,createtime  
		from `user` u ,orders o WHERE u.id = o.user_id
	</select>

</mapper>